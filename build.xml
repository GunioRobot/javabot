<project name="javabot" default="main" xmlns:artifact="urn:maven-artifact-ant">

    <property file="build.properties"/>
    <property file="build.default.properties"/>

    <property environment="env"/>

    <property name="build" location="build"/>
    <property name="build.src.dir" location="${build}/main/"/>
    <property name="build.test.dir" location="${build}/test/"/>
    <property name="src.dir" location="src/main/java"/>
    <property name="src.dir" location="src/main/resources"/>
    <property name="test.src.dir" location="src/test"/>

    <property name="emma.dir" location="${build}/emma"/>
    <property name="emma.instr.dir" location="${emma.dir}/instr"/>

    <property name="build.report.dir" location="${build}/reports"/>
    <property name="junit.report.dir" location="${build.report.dir}/junitreport"/>

    <property name="src.zip" value="share/src.zip"/>
    <property name="src.version" value="1.5"/>

    <target name="init" depends="deps">
        <mkdir dir="build"/>
        <mkdir dir="${build}/main"/>
        <mkdir dir="${build}/test"/>

        <mkdir dir="${build}/emma"/>
        <mkdir dir="${emma.dir}/instr"/>

        <mkdir dir="${build}/reports"/>
        <mkdir dir="${build.report.dir}/junitreport"/>

        <path id="project.class.path">
            <path refid="project.path"/>
            <pathelement location="${build.src.dir}"/>
        </path>
        <path id="build.class.path">
            <path refid="build.path"/>
            <path refid="project.class.path"/>
        </path>
    </target>

    <target name="main" depends="init, validate-config">
        <javac destDir="${build.src.dir}" srcDir="${src.dir}"
               classpathref="build.class.path" debug="true">
            <compilerarg line="-Xlint:unchecked"/>
        </javac>
        <javac destDir="${build.test.dir}" srcDir="${test.src.dir}"
               classpathref="build.class.path" debug="true">
            <compilerarg line="-Xlint:unchecked"/>
        </javac>
        <copy todir="${build.src.dir}">
            <fileset dir="${src.dir}" excludes="**/*.java"/>
        </copy>


    </target>

    <target name="war" depends="rebuild">
        <mkdir dir="build/war"/>
        <copy todir="build/war">
            <fileset dir="src/main/webapp"/>
        </copy>
        <copy todir="build/war/WEB-INF/lib" flatten="true">
            <fileset refid="runtime.fileset"/>
        </copy>
        <copy todir="build/war/WEB-INF/classes">
            <fileset dir="${build.src.dir}" includes="**/**"/>
        </copy>
        <jar destfile="${build}/javabot.war" basedir="build/war"/>
    </target>

    <target name="clean">
        <delete dir="${build}"/>
    </target>

    <target name="rebuild" depends="clean, main"/>

    <target name="test" depends="main, import-db">
        <antcall target="test-with-xml"/>
        <antcall target="test-all"/>
    </target>

    <target name="test-with-xml" depends="main" if="test.xml">
        <mkdir dir="${build.report.dir}"/>
        <mkdir dir="${junit.report.dir}"/>
        <mkdir dir="${emma.dir}"/>
        <mkdir dir="${emma.instr.dir}"/>

        <taskdef name="testng" classname="org.testng.TestNGAntTask" classpathref="test.class.path"/>
        <taskdef name="emma" classname="com.vladium.emma.emmaTask" classpathref="test.class.path"/>

        <emma>
            <instr instrpathref="build.src.path" destdir="${emma.instr.dir}" metadatafile="${emma.dir}/metadata.emma"
                   merge="true"/>
        </emma>

        <testng classpathref="test.class.path" outputDir="${build.report.dir}" sourcedir="${test.src.dir}"
                haltOnfailure="false">

            <xmlfileset dir="etc" includes="${test.xml}"/>
            <jvmarg value="-Demma.coverage.out.file=${emma.dir}/coverage.emma"/>
            <jvmarg value="-Demma.coverage.out.merge=true"/>
        </testng>

        <junitreport todir="${junit.report.dir}">
            <fileset dir="${build.report.dir}">
                <include name="*.xml"/>
            </fileset>

            <report todir="${junit.report.dir}"/>
        </junitreport>

        <emma>
            <report sourcepath="${src.dir}">
                <fileset dir="${emma.dir}">
                    <include name="*.emma"/>
                </fileset>
                <txt outfile="${emma.dir}/coverage.txt"/>
                <html outfile="${emma.dir}/coverage.html"/>
            </report>
        </emma>
    </target>

    <target name="test-all" depends="main" unless="test.xml">
        <mkdir dir="${build.report.dir}"/>
        <mkdir dir="${junit.report.dir}"/>
        <mkdir dir="${emma.dir}"/>
        <mkdir dir="${emma.instr.dir}"/>

        <taskdef name="testng" classname="org.testng.TestNGAntTask" classpathref="test.class.path"/>
        <taskdef name="emma" classname="com.vladium.emma.emmaTask" classpathref="test.class.path"/>

        <emma>
            <instr instrpathref="build.src.path" destdir="${emma.instr.dir}" metadatafile="${emma.dir}/metadata.emma"
                   merge="true"/>
        </emma>

        <testng classpathref="test.class.path" outputDir="${build.report.dir}" sourcedir="${test.src.dir}"
                haltOnfailure="false">

            <classfileset dir="${test.src.dir}" includes="**/*.java"/>
            <jvmarg value="-Demma.coverage.out.file=${emma.dir}/coverage.emma"/>
            <jvmarg value="-Demma.coverage.out.merge=true"/>
        </testng>

        <junitreport todir="${junit.report.dir}">
            <fileset dir="${build.report.dir}">
                <include name="*.xml"/>
            </fileset>

            <report todir="${junit.report.dir}"/>
        </junitreport>

        <emma>
            <report sourcepath="${src.dir}">
                <fileset dir="${emma.dir}">
                    <include name="*.emma"/>
                </fileset>
                <txt outfile="${emma.dir}/coverage.txt"/>
                <html outfile="${emma.dir}/coverage.html"/>
            </report>
        </emma>
    </target>

    <target name="buildxml" unless="docref.uptodate">
        <unzip src="${env.JAVA_HOME}/${src.zip}" dest="docRefBuild"/>
        <javadoc sourcepath="docRefBuild" packagenames="*" excludepackagenames="com.sun.*, org.apache.*, org.omg.*"
                 maxmemory="1024m" source="${src.version}" docletpathref="javabot.cp">
            <doclet name="javabot.javadoc.StructureDoclet">
                <param name="-x" value="docref.xml"/>
            </doclet>
        </javadoc>
        <delete dir="docRefBuild"/>
    </target>

    <target name="killbot" depends="main" description="Kills any running bot">
        <java classname="javabot.Killbot" classpathref="javabot.cp" fork="true"/>
    </target>

    <target name="run" depends="killbot" description="Starts the bot">
        <java classname="javabot.Javabot" classpathref="javabot.cp" fork="true" spawn="true"/>
    </target>

    <target name="javadocs">
        <property name="blah" refid="javabot.cp"/>

        <echo message="$blah"/>

        <java classname="javabot.IndependentJavadocViewer" classpathref="javabot.cp" fork="true">
            <arg value="String"/>
        </java>
    </target>

    <target name="validate-config" description="Validates the sample and active config files">
        <xmlvalidate file="config.xml"/>
        <xmlvalidate file="config.xml.sample"/>
    </target>

    <target name="import-db" if="scp.password">
        <sshexec host="antwerkz.com" username="jlee" password="${scp.password}"
                 command="pg_dump -aOxCDf javabot.dump javabot" trust="yes"/>
        <scp file="jlee:${scp.password}@antwerkz.com:javabot.dump" localToFile="etc/db.sql" trust="yes"/>
        <sshexec host="antwerkz.com" username="jlee" password="${scp.password}" command="rm javabot.dump" trust="yes"
                 verbose="true"/>
        <!-- exec executable="dropdb">
            <arg line="javabot"/>
        </exec>
        <exec executable="createdb">
            <arg line="javabot"/>
        </exec>
        <exec executable="psql">
            <arg line="javabot -f etc/javabot.sql"/>
        </exec>
        <exec executable="psql">
            <arg line="javabot -f etc/db.sql"/>
        </exec -->
    </target>

    <target name="deps">
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
            <classpath>
                <pathelement location="lib/maven-ant-tasks-2.0.6.jar"/>
            </classpath>
        </typedef>

        <artifact:remoteRepository id="main" url="http://repo1.maven.org/maven2/"/>
        <artifact:remoteRepository id="apache.cs.utah.edu" url="http://apache.cs.utah.edu"/>
        <artifact:remoteRepository id="wicket.repository" url="http://wicketstuff.org/maven/repository"/>
        <artifact:remoteRepository id="maven2.java.net.repository" url="http://download.java.net/maven/2/"/>
        <artifact:remoteRepository id="jboss.repository" url="http://repository.jboss.com/maven2/"/>
        <artifact:remoteRepository id="java.net.repository"
                                   url="https://maven-repository.dev.java.net/nonav/repository/" layout="legacy"/>

        <artifact:dependencies pathId="project.path" filesetId="runtime.fileset">
            <remoteRepository refid="wicket.repository"/>
            <remoteRepository refid="java.net.repository"/>
            <remoteRepository refid="maven2.java.net.repository"/>
            <remoteRepository refid="jboss.repository"/>
            <remoteRepository refid="apache.cs.utah.edu"/>
            <remoteRepository refid="main"/>


            <dependency groupId="mysql" artifactId="mysql-connector-java" version="5.0.5"/>
            <dependency groupId="commons-dbcp" artifactId="commons-dbcp" version="1.2.1"/>
            <dependency groupId="commons-logging" artifactId="commons-logging" version="1.0.4"/>
            <dependency groupId="org.springframework" artifactId="spring" version="2.0.5"/>
            <dependency groupId="org.hibernate" artifactId="hibernate-annotations" version="3.3.0.ga"/>
            <dependency groupId="org.hibernate" artifactId="hibernate-entitymanager" version="3.3.1.ga"/>
            <dependency groupId="org.hibernate" artifactId="hibernate" version="3.2.4.sp1"/>
            <dependency groupId="org.apache.wicket" artifactId="wicket" version="1.3.0-incubating-SNAPSHOT"/>
            <dependency groupId="org.apache.wicket" artifactId="wicket-extensions" version="1.3.0-incubating-SNAPSHOT"/>
            <dependency groupId="org.apache.wicket" artifactId="wicket-auth-roles" version="1.3.0-incubating-SNAPSHOT"/>
            <dependency groupId="org.apache.wicket" artifactId="wicket-spring-annot"
                        version="1.3.0-incubating-SNAPSHOT"/>
            <dependency groupId="jdom" artifactId="jdom" version="1.0"/>
            <dependency groupId="pircbot" artifactId="pircbot" version="1.4.2"/>
        </artifact:dependencies>

        <artifact:dependencies pathId="build.path">
            <remoteRepository refid="wicket.repository"/>
            <remoteRepository refid="maven2.java.net.repository"/>
            <remoteRepository refid="java.net.repository"/>
            <remoteRepository refid="apache.cs.utah.edu"/>
            <remoteRepository refid="main"/>

            <dependency groupId="org.easymock" artifactId="easymock" version="2.2"/>
            <dependency groupId="org.unitils" artifactId="unitils" version="1.0-rc-2"/>
            <dependency groupId="org.mortbay.jetty" artifactId="jetty" version="6.1.3"/>
            <dependency groupId="org.mortbay.jetty" artifactId="jetty-util" version="6.1.3"/>
            <dependency groupId="org.testng" artifactId="testng" version="5.5"/>
            <dependency groupId="org.testng" artifactId="testng" version="5.5" classifier="jdk15"/>
        </artifact:dependencies>
    </target>
</project>
