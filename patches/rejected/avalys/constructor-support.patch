--- javabot_exist/src/javabot/JavadocParser.java	Tue Aug 17 12:01:54 2004
+++ javabot/src/javabot/JavadocParser.java	Tue Aug 17 11:59:59 2004
@@ -6,6 +6,7 @@
 import java.io.IOException;
 import java.util.*;
 import java.lang.reflect.Method;
+import java.lang.reflect.Constructor;
 import java.net.URLEncoder;
 
 public class JavadocParser
@@ -118,20 +119,28 @@
 	// Otherwise, looks for the method with the exactly described signature
 	// TODO: Pick the method closest to the described signature
 	private String getMethodURL(Class clazz, String methodName, String signatureTypes) {
-		Method[] methods = clazz.getDeclaredMethods();
-		Arrays.sort(methods, new MethodSortComparator());
-		for (int i = 0; i < methods.length; i++) {
-			if (methods[i].getName().equals(methodName)) {
-				String javadocSig = buildJavaDocSignature(methods[i]);
-				String requestSig = buildRequestSignature(methods[i]);
-				String signature = methodName + "(" + signatureTypes + ")";
-				if ("*".equals(signatureTypes) || 
-				    signature.equals(javadocSig) || 
-				    signature.equals(requestSig)) {
-					// This line determines how verbose the returned info is:
-					// (include fully qualified names or not)
-					return getShortTypeName(clazz) + "." + requestSig + ": " +
-						baseUrl + getClassUrlPart(clazz) + ".html#" + encode(javadocSig);
+		if (methodName.equals(getShortTypeName(clazz))) {
+			// Looking for a constructor
+			Constructor[] consts = clazz.getConstructors();
+			Arrays.sort(consts, new ConstructorSortComparator());
+			for (int i = 0; i < consts.length; i++) {
+				String url = checkSignatureMatches(clazz,methodName,
+					consts[i].getParameterTypes(),signatureTypes);
+				if (url != null) {
+					return url;
+				}
+			}
+		} else {
+			// Looking for a method
+			Method[] methods = clazz.getDeclaredMethods();
+			Arrays.sort(methods, new MethodSortComparator());
+			for (int i = 0; i < methods.length; i++) {
+				if (methods[i].getName().equals(methodName)) {
+					String url = checkSignatureMatches(clazz,methodName,
+							methods[i].getParameterTypes(),signatureTypes);
+					if (url != null) {
+						return url;
+					}
 				}
 			}
 		}
@@ -144,11 +153,26 @@
 		return null;
 	}
 
+	private String checkSignatureMatches(Class clazz, String methodName,
+										 Class[] parameterTypes, String signatureTypes) {
+		String javadocSig = buildJavaDocSignature(methodName,parameterTypes);
+		String requestSig = buildRequestSignature(methodName,parameterTypes);
+		String signature = methodName + "(" + signatureTypes + ")";
+		if ("*".equals(signatureTypes) ||
+			signature.equals(javadocSig) ||
+			signature.equals(requestSig)) {
+			// This line determines how verbose the returned info is:
+			// (include fully qualified names or not)
+			return getShortTypeName(clazz) + "." + requestSig + ": " +
+					baseUrl + getClassUrlPart(clazz) + ".html#" + encode(javadocSig);
+		}
+		return null;
+	}
+
 	// Javadoc requires fully-qualified class names in parameters
-	private static String buildJavaDocSignature(Method method) {
+	private static String buildJavaDocSignature(String methodName, Class[] arguments) {
 		StringBuffer buffer = new StringBuffer();
-		Class[] arguments = method.getParameterTypes();
-		buffer.append(method.getName() + "(");
+		buffer.append(methodName + "(");
 		for (int j = 0; j < arguments.length; j++) {
 			if (j > 0) {
 				buffer.append(", ");
@@ -160,10 +184,9 @@
 	}
 
 	// Javabot only requires the name of the class
-	private static String buildRequestSignature(Method method) {
+	private static String buildRequestSignature(String methodName, Class[] arguments) {
 		StringBuffer buffer = new StringBuffer();
-		Class[] arguments = method.getParameterTypes();
-		buffer.append(method.getName() + "(");
+		buffer.append(methodName + "(");
 		for (int j = 0; j < arguments.length; j++) {
 			if (j > 0) {
 				buffer.append(", ");
@@ -224,5 +247,24 @@
 			}
 		}
 	}
+
+	private static class ConstructorSortComparator implements Comparator {
+		public int compare(Object o, Object o1) {
+			Constructor one = (Constructor)o;
+			Constructor two = (Constructor)o1;
+			if (one.getName().equals(two.getName())) {
+				if (one.getParameterTypes().length == two.getParameterTypes().length) {
+					return 0;
+				} else if (one.getParameterTypes().length > two.getParameterTypes().length) {
+					return 1;
+				} else {
+					return -1;
+				}
+			} else {
+				return one.getName().compareTo(two.getName());
+			}
+		}
+	}
+
 	private final String baseUrl;
 }
