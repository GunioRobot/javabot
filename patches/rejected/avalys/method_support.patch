Index: src/javabot/JavadocParser.java
===================================================================
--- src/javabot/JavadocParser.java	(revision 52)
+++ src/javabot/JavadocParser.java	(working copy)
@@ -4,8 +4,8 @@
 import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.HashMap;
+import java.util.*;
+import java.lang.reflect.Method;
 
 public class JavadocParser
 {
@@ -52,26 +52,110 @@
 		fileReader.close();
 	}
     
-	public String[] javadoc(String className)
+	public String[] javadoc(String key)
 	{
-		ArrayList list=(ArrayList)map.get(className.toLowerCase());
-
-		if (list == null)
+		List list;
+		if (key.indexOf('(') == -1)
 		{
-			return new String[0];
+			// The presence of ( indicates a method search
+			list = (ArrayList)map.get(key.toLowerCase());
+			if (list == null) {
+				return new String[0];
+			}
+			String[] results=new String[list.size()];
+			for (int i=0;i<list.size();i++)
+			{
+				String entry=(String)list.get(i);
+				String fullName=entry.replace('/','.');
+				results[i]=fullName+": "+baseUrl+entry+".html";
+			}
+		    return results;
 		}
-		
-		String[] results=new String[list.size()];
-		
-		for (int i=0;i<list.size();i++)
+        	else
 		{
-			String entry=(String)list.get(i);
-			String fullName=entry.replace('/','.');
-			results[i]=fullName+": "+baseUrl+entry+".html";
-        	}
+			int finalIndex = key.lastIndexOf('.');
+			int parenDex = key.indexOf('(');
+			String className = key.substring(0,finalIndex);
+			String methodName = key.substring(finalIndex+1,parenDex);
+			list=(ArrayList)map.get(className.toLowerCase());
+			if (list == null) {
+				return new String[0];
+			}
+			return processClassList(list, methodName);
+        
+		}
+	}
+
+	private String[] processClassList(List classList, String methodName) {
+		List newList = new ArrayList();
+		for (int i = 0; i < classList.size(); i++) {
+			String entry = (String)classList.get(i);
+			String className = entry.replace('/','.');
+			try {
+				Class clazz = Class.forName(className);
+				String methodAnchor = getMethodSignature(clazz, methodName);
+				if (methodAnchor != null) {
+					newList.add(className + "." + methodAnchor + 
+					": " + baseUrl + entry + ".html#" + methodAnchor);
+				}
+			} catch (Exception e) {
+				// Ignore classes that we can't find
+				e.printStackTrace();
+			}
+		}
+		return (String[]) newList.toArray(new String[newList.size()]);
+	}
 		
-		return results;
+	// Returns the signature of the named method
+	// If more than one method exists with the same name, picks the one with
+	// the fewest number of arguments
+	// TODO: Pick the method closest to the described signature
+	private String getMethodSignature(Class clazz, String methodName) {
+		Method[] methods = clazz.getMethods();
+		Arrays.sort(methods, new MethodSortComparator());
+		for (int i = 0; i < methods.length; i++) {
+			if (methods[i].getName().equals(methodName)) {
+				StringBuffer buffer = new StringBuffer();
+				Class[] arguments = methods[i].getParameterTypes();
+				buffer.append(methodName + "(");
+				for (int j = 0; j < arguments.length; j++) {
+					if (j > 0) {
+						buffer.append(", ");
+					}
+					buffer.append(getTypeName(arguments[j]));
+				}
+				buffer.append(")");
+				return buffer.toString();
+			}
+		}
+		return null;
 	}
-    
+
+	private String getTypeName(Class clazz) {
+		if (clazz.isArray()) {
+			return clazz.getComponentType().getName() + "[]";
+		} else {
+			return clazz.getName();
+		}
+	}
+	
+	// Sorts methods by the number of arguments they accept
+	private class MethodSortComparator implements Comparator {
+		public int compare(Object o, Object o1) {
+			Method one = (Method)o;
+			Method two = (Method)o1;
+			if (one.getName().equals(two.getName())) {
+				if (one.getParameterTypes().length == two.getParameterTypes().length) {
+					return 0;
+				} else if (one.getParameterTypes().length > two.getParameterTypes().length) {
+					return 1;
+				} else {
+					return -1;
+				}
+			} else {
+				return one.getName().compareTo(two.getName());
+			}
+		}
+	}
 	private final String baseUrl;
 }
Index: src/javabot/Javabot.java
===================================================================
--- src/javabot/Javabot.java	(revision 52)
+++ src/javabot/Javabot.java	(working copy)
@@ -188,8 +188,6 @@
 
     public void onMessage(String channel, String sender, String login,
         String hostname, String message) {
-        String[] startStrings =
-            {"~", "javabot: ", "javabot, ", "javabot "};
         for(int a = 0; a < startStrings.length; a++) {
             int length = startStrings[a].length();
             if(message.startsWith(startStrings[a])) {
